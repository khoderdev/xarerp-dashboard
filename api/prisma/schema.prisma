generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(uuid())
  name            String
  email           String      @unique
  password        String
  branch_id       String
  position        String
  permissions     String
  active          Boolean
  created_at      DateTime    @default(now())
  updated_at      DateTime    @default(now())
  branch          Branch      @relation(fields: [branch_id], references: [id], onDelete: Cascade)
  orders          Order[]
  purchases       Purchase[]
  administratorOf Store[]     @relation(name: "StoreAdmins")
  sellers         Seller[]
  clients         Client[]
  tickets         Ticket[]

  @@map("users")
}

model Store {
  id             String   @id @default(uuid())
  name           String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  branches       Branch[]
  administrators User[]   @relation(name: "StoreAdmins")
  unityPurchases  Purchase[]
  unityClients    Client[]
  unityTickets    Ticket[]
  sales           Sale[]
  Administrator   Administrator[]

  @@map("stores")
}

model Branch {
  id         String          @id @default(uuid())
  name       String
  store_id   String
  created_at DateTime        @default(now())
  updated_at DateTime        @default(now())
  store      Store           @relation(fields: [store_id], references: [id], onDelete: Cascade)
  users      User[]
  products   BranchProduct[]
  orders     Order[]

  @@map("branches")
}

model Category {
  id         String    @id @default(uuid())
  title      String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  products   Product[]

  @@map("categories")
}

model Product {
  id             String          @id @default(uuid())
  name           String
  description    String
  purchase_price Int
  sale_price     Int
  category_id    String
  provider_id    String? // Add the provider_id field (optional since the relation is optional)
  created_at     DateTime        @default(now())
  updated_at     DateTime        @default(now())
  category       Category        @relation(fields: [category_id], references: [id], onDelete: Cascade)
  provider       Provider?       @relation(fields: [provider_id], references: [id])
  branchProducts BranchProduct[]
  orderItems     OrderItem[]
  purchase       Purchase[]
  sales          Sale[]
  sold_amount    Int
  
  @@map("products")
}

model BranchProduct {
  id         String   @id @default(uuid())
  product_id String
  branch_id  String
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  branch     Branch   @relation(fields: [branch_id], references: [id], onDelete: Cascade)

  @@map("branch_products")
}

model Order {
  id          String      @id @default(uuid())
  user_id     String
  branch_id   String
  total_price Int
  created_at  DateTime    @default(now())
  updated_at  DateTime    @default(now())
  user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  branch      Branch      @relation(fields: [branch_id], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(uuid())
  order_id   String
  product_id String
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Purchase {
  id          String   @id @default(uuid())
  user_id     String
  unity_id    String
  product_id  String
  provider_id String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  unity       Store    @relation(fields: [unity_id], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  provider    Provider @relation(fields: [provider_id], references: [id], onDelete: Cascade)

  @@map("purchases")
}

model Provider {
  id         String     @id @default(uuid())
  name       String
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  products   Product[]
  purchases  Purchase[]

  @@map("providers")
}

model Seller {
  id         String   @id @default(uuid())
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  sales      Sale[]

  @@map("sellers")
}

model Client {
  id         String   @id @default(uuid())
  user_id    String
  unity_id   String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  unity      Store    @relation(fields: [unity_id], references: [id], onDelete: Cascade)
  sales      Sale[]

  @@map("clients")
}

model Ticket {
  id         String   @id @default(uuid())
  unity_id   String
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  unity      Store    @relation(fields: [unity_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("tickets")
}

model Sale {
  id         String   @id @default(uuid())
  product_id String
  unity_id   String
  client_id  String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  unity      Store    @relation(fields: [unity_id], references: [id], onDelete: Cascade)
  client     Client   @relation(fields: [client_id], references: [id], onDelete: Cascade)
  Seller     Seller?  @relation(fields: [sellerId], references: [id])
  sellerId   String?

  @@map("sales")
}

model Administrator {
  id         String   @id @default(uuid())
  storeId    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  store      Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("administrators")
}
